import { DeviceManager } from './DeviceManager';
import { DeviceConfig, PlaybackStatus, ServerStatus, ChannelConfig, LayerStatus } from '@/lib/types/device';
import { EventEmitter } from 'events';
import * as net from 'net';

export class Channel {
  private layers: Map<number, LayerStatus> = new Map();

  constructor(
    public readonly id: number,
    public readonly number: number,
    public readonly resolution: string,
    public readonly frameRate: number
  ) {}

  addLayer(layer: LayerStatus) {
    this.layers.set(layer.number, layer);
  }

  getLayer(layerNumber: number): LayerStatus | undefined {
    const layer = this.layers.get(layerNumber);
    return layer ? { ...layer } : null;
  }

  updateLayerStatus(layerNumber: number, status: Partial<LayerStatus>) {
    const layer = this.layers.get(layerNumber);
    if (layer) {
      Object.assign(layer, status);
    }
    return layer;
  }

  getLayers(): LayerStatus[] {
    return Array.from(this.layers.values());
  }
}

export class CasparServer extends DeviceManager {
  private static instances: Map<number, CasparServer> = new Map();
  private channels: Map<number, Channel> = new Map();
  private events: EventEmitter = new EventEmitter();
  private socket: net.Socket | null = null;
  private isConnected: boolean = false;
  private config: DeviceConfig;
  private connectPromise: Promise<void> | null = null;
  private statusInterval: NodeJS.Timeout | null = null;
  private responseBuffer: string = '';
  private pendingCommands: Map<string, { 
    resolve: (value: any) => void;
    reject: (error: Error) => void;
    command: string;
  }> = new Map();

  private constructor(config: DeviceConfig) {
    super(config);
    this.config = config;
  }

  static getInstance(config: DeviceConfig): CasparServer {
    let instance = CasparServer.instances.get(config.id);
    if (!instance) {
      instance = new CasparServer(config);
      CasparServer.instances.set(config.id, instance);
    }
    return instance;
  }

  static async getState(serverId: number): Promise<{
    connected: boolean;
    version: string | null;
    channels: any[];
  }> {
    console.log(`üîç Buscando instancia del servidor ${serverId}...`);
    const instance = CasparServer.instances.get(serverId);
    
    if (!instance) {
      console.error(`‚ùå No se encontr√≥ instancia del servidor ${serverId}`);
      return {
        connected: false,
        version: null,
        channels: []
      };
    }

    console.log(`‚úÖ Instancia encontrada para servidor ${serverId}, obteniendo estado...`);
    return instance.getServerState();
  }

  isServerConnected(): boolean {
    return this.isConnected && this.socket !== null;
  }

  async connect(): Promise<boolean> {
    console.log(`üîå Intentando conectar con servidor CasparCG ${this.config.name} en ${this.config.host}:${this.config.port}`);
    
    // Si ya est√° conectado, retornar true
    if (this.isConnected && this.socket) {
      console.log('‚úÖ Ya conectado al servidor');
      return true;
    }

    // Si hay una conexi√≥n en progreso, esperar a que termine
    if (this.connectPromise) {
      console.log('‚è≥ Conexi√≥n en progreso, esperando...');
      await this.connectPromise;
      return this.isConnected;
    }

    this.connectPromise = new Promise((resolve, reject) => {
      try {
        console.log('üîÑ Creando nueva conexi√≥n de socket...');
        this.socket = new net.Socket();

        // Configurar timeout de 5 segundos
        this.socket.setTimeout(5000);

        // Manejador de timeout
        this.socket.on('timeout', () => {
          console.error('‚è∞ Timeout de conexi√≥n');
          this.socket?.destroy();
          reject(new Error('Connection timeout'));
        });

        // Manejador de conexi√≥n exitosa
        this.socket.on('connect', () => {
          console.log(`‚úÖ Conectado exitosamente a ${this.config.host}:${this.config.port}`);
          this.isConnected = true;
          this.startStatusPolling();
          resolve(true);
        });

        // Manejador de errores
        this.socket.on('error', (error) => {
          console.error(`‚ùå Error de socket:`, error);
          this.cleanup();
          reject(error);
        });

        // Manejador de cierre de conexi√≥n
        this.socket.on('close', () => {
          console.log('üîå Conexi√≥n cerrada');
          this.cleanup();
        });

        // Intentar conectar
        console.log(`üîÑ Conectando a ${this.config.host}:${this.config.port}...`);
        this.socket.connect(this.config.port, this.config.host);

      } catch (error) {
        console.error('‚ùå Error al crear socket:', error);
        this.cleanup();
        reject(error);
      }
    }).finally(() => {
      this.connectPromise = null;
    });

    try {
      await this.connectPromise;
      return true;
    } catch (error) {
      console.error('‚ùå Error en la conexi√≥n:', error);
      return false;
    }
  }

  async disconnect(): Promise<void> {
    console.log(`üîå Desconectando del servidor ${this.config.name}...`);
    
    if (this.statusInterval) {
      console.log('‚èπÔ∏è Deteniendo polling de estado');
      clearInterval(this.statusInterval);
      this.statusInterval = null;
    }

    if (this.socket) {
      try {
        console.log('üîÑ Cerrando conexi√≥n de socket...');
        this.socket.destroy();
        this.socket = null;
      } catch (error) {
        console.error('‚ùå Error al cerrar socket:', error);
      }
    }

    this.isConnected = false;
    this.connectPromise = null;
    console.log(`‚úÖ Desconexi√≥n completada para ${this.config.name}`);
  }

  private cleanup() {
    if (this.statusInterval) {
      clearInterval(this.statusInterval);
      this.statusInterval = null;
    }
    
    if (this.socket) {
      this.socket.removeAllListeners();
      this.socket = null;
    }
    
    this.isConnected = false;
    this.connectPromise = null;
  }

  // M√©todo para reconectar si es necesario
  private async ensureConnection(): Promise<void> {
    if (!this.isConnected || !this.socket) {
      console.log(`üîÑ Reconectando con servidor ${this.config.name}...`);
      try {
        await this.connect();
      } catch (error) {
        console.error(`‚ùå Error al reconectar con servidor ${this.config.name}:`, error);
        throw new Error(`Failed to reconnect to server: ${error.message}`);
      }
    }
  }

  async getVersion(): Promise<string> {
    try {
      console.log(`üîç Obteniendo versi√≥n del servidor ${this.config.name}...`);
      const response = await this.sendCommand('VERSION');
      console.log(`‚úÖ Versi√≥n del servidor ${this.config.name}:`, response);
      return response.trim();
    } catch (error) {
      console.error(`‚ùå Error al obtener versi√≥n del servidor ${this.config.name}:`, error);
      throw error;
    }
  }

  async getSystemInfo(): Promise<string> {
    try {
      console.log(`üîç Obteniendo informaci√≥n del sistema para ${this.config.name}...`);
      const response = await this.sendCommand('INFO SYSTEM');
      console.log(`‚úÖ Informaci√≥n del sistema para ${this.config.name}:`, response);
      return response;
    } catch (error) {
      console.error(`‚ùå Error al obtener informaci√≥n del sistema para ${this.config.name}:`, error);
      throw error;
    }
  }

  private async sendCommand(command: string): Promise<string> {
    console.log(`üì§ Enviando comando al servidor ${this.config.name}: ${command}`);
    
    if (!this.socket) {
      console.error('‚ùå No hay conexi√≥n con el servidor');
      throw new Error('Not connected to server');
    }

    await this.ensureConnection();

    return new Promise((resolve, reject) => {
      try {
        const commandId = Math.random().toString(36).substring(7);
        
        const timeout = setTimeout(() => {
          console.error(`‚è∞ Timeout al esperar respuesta para comando: ${command}`);
          this.pendingCommands.delete(commandId);
          reject(new Error(`Command timeout: ${command}`));
        }, 5000);

        this.pendingCommands.set(commandId, {
          resolve: (response) => {
            clearTimeout(timeout);
            console.log(`‚úÖ Respuesta recibida para comando ${command}:`, response);
            resolve(response);
          },
          reject: (error) => {
            clearTimeout(timeout);
            console.error(`‚ùå Error en comando ${command}:`, error);
            reject(error);
          },
          command
        });

        console.log(`üì§ Enviando comando ${commandId}: ${command}`);
        this.socket.write(command + '\r\n');

      } catch (error) {
        console.error(`‚ùå Error al enviar comando ${command}:`, error);
        reject(error);
      }
    });
  }

  private startStatusPolling() {
    if (this.statusInterval) {
      clearInterval(this.statusInterval);
    }

    this.statusInterval = setInterval(() => {
      if (this.isConnected) {
        const status = this.getStatus();
        this.events.emit('statusChange', status);
      }
    }, 1000);
  }

  private parseResponse(data: string): { code: number; data: string } {
    // Trim whitespace and handle empty responses
    const trimmedData = data.trim();
    if (!trimmedData) {
      // Instead of throwing error, return a neutral response
      return {
        code: 200,
        data: ''
      };
    }

    // Try to match standard CasparCG response format: XXX [data]
    const standardMatch = trimmedData.match(/^(\d{3})(?: (.+))?$/);
    if (standardMatch) {
      return {
        code: parseInt(standardMatch[1], 10),
        data: standardMatch[2] || ''
      };
    }

    // If it's not a standard response, try to extract any numeric code
    const numberMatch = trimmedData.match(/(\d{3})/);
    if (numberMatch) {
      return {
        code: parseInt(numberMatch[1], 10),
        data: trimmedData
      };
    }

    // If no numeric code found, treat as data with default success code
    return {
      code: 200,
      data: trimmedData
    };
  }

  async getServerState(): Promise<{
    connected: boolean;
    version: string | null;
    channels: any[];
  }> {
    console.log(`üîç Obteniendo estado del servidor ${this.config.name}...`);
    try {
      // Intentar conectar solo si no est√° conectado
      if (!this.isConnected) {
        await this.connect();
      }
      
      // Obtener versi√≥n solo si estamos conectados
      let version = null;
      if (this.isConnected) {
        try {
          version = await this.getVersion();
        } catch (versionError) {
          console.warn(`‚ö†Ô∏è No se pudo obtener la versi√≥n del servidor ${this.config.name}:`, versionError);
        }
      }

      // Mapear los canales con informaci√≥n detallada
      const channelsInfo = Array.from(this.channels.values()).map(channel => ({
        id: channel.id,
        number: channel.number,
        resolution: channel.resolution,
        frameRate: channel.frameRate,
        layers: channel.getLayers()
      }));

      const state = {
        connected: this.isConnected,
        version,
        channels: channelsInfo
      };

      console.log(`‚úÖ Estado del servidor ${this.config.name}:`, state);
      return state;

    } catch (error) {
      console.error(`‚ùå Error al obtener estado del servidor ${this.config.name}:`, error);
      return {
        connected: false,
        version: null,
        channels: []
      };
    }
  }

  async testConnection(): Promise<{
    connected: boolean;
    version: string | null;
  }> {
    console.log(`üîå Probando conexi√≥n con servidor ${this.config.name}...`);
    try {
      // Si ya est√° conectado, verificar que la conexi√≥n sigue activa
      if (this.isConnected && this.socket) {
        try {
          const version = await this.getVersion();
          console.log(`‚úÖ Conexi√≥n existente v√°lida con ${this.config.name}, versi√≥n:`, version);
          return { connected: true, version };
        } catch (error) {
          console.warn(`‚ö†Ô∏è Conexi√≥n existente inv√°lida con ${this.config.name}, intentando reconectar...`);
          await this.disconnect();
        }
      }

      // Intentar nueva conexi√≥n
      await this.connect();
      const version = await this.getVersion();
      
      console.log(`‚úÖ Conexi√≥n exitosa con ${this.config.name}, versi√≥n:`, version);
      return {
        connected: true,
        version
      };
    } catch (error) {
      console.error(`‚ùå Error al conectar con servidor ${this.config.name}:`, error);
      // Asegurar que la conexi√≥n se cierra en caso de error
      try {
        await this.disconnect();
      } catch (disconnectError) {
        console.warn(`‚ö†Ô∏è Error al desconectar despu√©s de fallo:`, disconnectError);
      }
      return {
        connected: false,
        version: null
      };
    }
  }

  async play(channel: number, layer: number, file: string): Promise<void> {
    const ch = this.channels.get(channel);
    if (!ch) throw new Error(`Channel ${channel} not found`);

    try {
      await this.sendCommand(`PLAY ${channel}-${layer} "${file}"`);

      const status = ch.updateLayerStatus(layer, {
        status: 'playing',
        currentMedia: file
      });

      if (status) {
        this.events.emit('statusChange', this.getStatus());
      }
    } catch (error) {
      console.error('Failed to send PLAY command:', error);
      throw error;
    }
  }

  async stop(channel: number, layer: number): Promise<void> {
    const ch = this.channels.get(channel);
    if (!ch) throw new Error(`Channel ${channel} not found`);

    try {
      await this.sendCommand(`STOP ${channel}-${layer}`);

      const status = ch.updateLayerStatus(layer, {
        status: 'stopped',
        currentMedia: null
      });

      if (status) {
        this.events.emit('statusChange', this.getStatus());
      }
    } catch (error) {
      console.error('Failed to send STOP command:', error);
      throw error;
    }
  }

  getStatus(): ServerStatus {
    const status: ServerStatus = {
      connected: this.isConnected,
      channels: {}
    };

    this.channels.forEach((channel, channelNumber) => {
      status.channels[channelNumber] = {
        layers: {}
      };
      
      channel.getLayers().forEach(layer => {
        status.channels[channelNumber].layers[layer.number] = layer;
      });
    });

    return status;
  }

  onStatusChange(callback: (status: ServerStatus) => void): () => void {
    this.events.on('statusChange', callback);
    return () => this.events.off('statusChange', callback);
  }

  private handleData(data: string) {
    console.log(`üì• Datos recibidos del servidor ${this.config.name}:`, data);
    this.responseBuffer += data;

    // Procesar todas las l√≠neas completas en el buffer
    while (true) {
      const newlineIndex = this.responseBuffer.indexOf('\r\n');
      if (newlineIndex === -1) break;

      const line = this.responseBuffer.substring(0, newlineIndex);
      this.responseBuffer = this.responseBuffer.substring(newlineIndex + 2);

      try {
        const response = this.parseResponse(line);
        console.log(`‚úÖ Respuesta parseada:`, response);

        // Buscar el comando pendiente m√°s antiguo para esta respuesta
        for (const [commandId, { resolve, reject, command }] of this.pendingCommands) {
          // Resolver el comando y eliminarlo de pendientes
          this.pendingCommands.delete(commandId);
          
          if (response.code >= 400) {
            console.error(`‚ùå Error del servidor para comando ${command}:`, response);
            reject(new Error(`Server error ${response.code}: ${response.data}`));
          } else {
            console.log(`‚úÖ Comando ${command} completado con √©xito`);
            resolve(response.data);
          }
          
          break; // Solo resolver un comando por respuesta
        }
      } catch (error) {
        console.error(`‚ùå Error al procesar respuesta:`, error);
        // Continuar procesando el resto del buffer
      }
    }
  }
}